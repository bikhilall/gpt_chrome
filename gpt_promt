This code is generated by ChatGpt, by simply asking the followings:

task1 = """
Create a chrome extension which has a text box entry to get commands and button to submit the command. After submiting the command, it will send the current page content and actionable elements to chatgpt api endpoint, asking chatgpt to click or fill forms in the page to achieve the commanded goal, or get closer to it. It is also able to go to different URLs if chatgpt suggests.
It should also be able to highlight an element of piece of content in the page to show the user.
The API key of chatgpt should be set by the user in the setting section. User can also pick different versions of chatgpt in the setting section.

"""


task2 = """
curl https://api.openai.com/v1/models \
  -H "Authorization: Bearer $OPENAI_API_KEY"

async function getAvailableModels(apiKey) {
  const response = await fetch(`https://api.openai.com/v1/models`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${apiKey}`
    }
  });
  return response.json();
}

{
  "object": "list",
  "data": [
    {
      "id": "model-id-0",
      "object": "model",
      "created": 1686935002,
      "owned_by": "organization-owner"
    },
    {
      "id": "model-id-1",
      "object": "model",
      "created": 1686935002,
      "owned_by": "organization-owner",
    },
    {
      "id": "model-id-2",
      "object": "model",
      "created": 1686935002,
      "owned_by": "openai"
    },
  ],
  "object": "list"
}


document.getElementById('save').addEventListener('click', async function() {
  const apiKey = document.getElementById('apiKey').value;
  const chatGptVersion = document.getElementById('chatGptVersion').value;
  chrome.storage.sync.set({ apiKey, chatGptVersion }, function() {
    console.log('Options saved.');
  });
});


use HTTP Request: POST https://api.openai.com/v1/chat/completions to send the commands to chatgpt:

request example:
curl https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d '{
    "model": "gpt-3.5-turbo",
    "messages": [
      {
        "role": "system",
        "content": "You are a helpful assistant."
      },
      {
        "role": "user",
        "content": "Hello!"
      }
    ]
  }'

Response example:
{
  "id": "chatcmpl-123",
  "object": "chat.completion",
  "created": 1677652288,
  "model": "gpt-3.5-turbo-0613",
  "system_fingerprint": "fp_44709d6fcb",
  "choices": [{
    "index": 0,
    "message": {
      "role": "assistant",
      "content": "\n\nHello there, how may I assist you today?",
    },
    "logprobs": null,
    "finish_reason": "stop"
  }],
  "usage": {
    "prompt_tokens": 9,
    "completion_tokens": 12,
    "total_tokens": 21
  }
}

pick the first choice and just the content in the message and print that in the response section of the extension.

when submit button is pressed. collect th epage data and clickable elements and sent to chat gpt in the following format:

chat content to chatGPT:
"
    This is a web page with the following content:
    content

    The user is asking for the following:
    command

    Respond in the following json format:
    {responseToUser:"what to tell the user", pageElementsToHighlight:[id,id2], formsToFill:{id:content, id2:content2}, elementToClick: id, urlToOpen:url}
    responseToUser is required, everything else is optional.
"
after recieving the completion response content from chatgpt, jsonify the response and take each action accordingly and in order:
first populate the response section of the extension with the api response from chatgpt, then highlight the elements if any, then fill the forms if there is any. then click on the element if any, then opn the url if any.
wait 1 second between each step.

"""
